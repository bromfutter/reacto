Import('platforms')

cpputest = {
    'CXXFLAGS' : [
                  '-Wno-c++11-long-long', '-Wno-long-long', '-Wall', '-Wextra', '-Wshadow', '-Wswitch-default', '-Wswitch-enum',
                  '-Wconversion', '-pedantic', '-Wsign-conversion', '-Woverloaded-virtual', '-Wno-disabled-macro-expansion',
                  '-Wno-padded', '-Wno-reserved-id-macro', '-Wno-keyword-macro', '-Wno-global-constructors',
                  '-Wno-exit-time-destructors', '-Wno-weak-vtables', '-Wno-old-style-cast'
                 ],
    'CFLAGS' :   [
                  '-Wall', '-Wextra', '-Wswitch-default', '-Wswitch-enum', '-Wconversion', '-Wno-long-long'
                 ],
}

new_macros = File('./cpputest-tree/include/CppUTest/MemoryLeakDetectorNewMacros.h')
malloc_macros = File('./cpputest-tree/include/CppUTest/MemoryLeakDetectorMallocMacros.h')
cpputest_include = Dir('./cpputest-tree/include')

Command(target = [new_macros, malloc_macros],
                        source = File('./setup-cpputest.sh'),
                        action = './${SOURCE} ' + Dir('./cpputest-tree').path )

cpputest_exports = {
    'CPPDEFINES': ['HAVE_CONFIG_H'],
    'CXXFLAGS' : [
                  '-include',
                  new_macros,
                  '-include',
                  malloc_macros
                 ],
    'CFLAGS' : [
                  '-include',
                  malloc_macros
                 ],
    'CPPPATH' : [ cpputest_include, Dir('./include') ],
    # This is a ugly workaround becouse scons is not detecting dependencies in CPPFLAGS
    # every single build will have to add CPPINCLUDES dependency to their's .o
    'CPPINCLUDES' : [new_macros, malloc_macros]
}

for name, plat in platforms.items():
    # Modify imported environment to be used by the parent script
    plat['env'].Prepend(**cpputest_exports)

    # Clone, change and use the Environment
    env = plat['env'].Clone()
    env.Append(**cpputest)
    config = {'cpputest_extensions_enabled' : plat['cpputest_extensions_enabled']}
    mods = env.SConscript('./Sconscript.variant', exports = ['env', 'name', 'config'], variant_dir='./build/' + name, duplicate=0)

    # Add libs to parent env.
    plat['env'].Append(LIBS = mods['libs'])
    plat['env'].Append(LIBPATH = mods['path'])
