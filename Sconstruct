#!python

# Overview of the build system
# - All global configurations goes in this file,
# - Each platforms created contains configurations and environment
# - Each project is called passing platforms.
# - For each platform one build will run, always in the 'build' folder.
# - Projects are expected to append data to platform enviroments when
#   necessary, such as includes, defines, libraries, etc.


#
# First we add our custom Functions to a default enviroment and configure it
import os
import fnmatch
default_env = Environment()
# Enable color terminal if available
if 'TERM' in os.environ.keys():
    default_env['ENV']['TERM'] = os.environ['TERM']
# Add a FindFiles function to help Programs to search for code
def FindFiles(self, path, glob):
    matches = []
    matches.extend(Glob(path + '/' + glob))
    matches.extend(Glob(path + '/*/' + glob))
    matches.extend(Glob(path + '/*/*/' + glob))
    matches.extend(Glob(path + '/*/*/*/' + glob))
    matches.extend(Glob(path + '/*/*/*/*/' + glob))
    matches.extend(Glob(path + '/*/*/*/*/*/' + glob))
    return matches


default_env.AddMethod(FindFiles)

# Transform a multiline string into a list of Files
def MultiLineStringToFiles(self, multiline_string):
    r = []
    for f in multiline_string.split('\n'):
        if len(f) > 0:
            r.append(File('./' + f))
    return r
default_env.AddMethod(MultiLineStringToFiles)

# Transform a list of C source into Objects
def SourceToObjects(self, source_list):
    r = []
    for s in source_list:
        s_path = s.path
        o_path = s_path.replace('.CPP', '.o').replace('.C', '.o').replace('.cpp', '.o').replace('.c', '.o')
        o = File('#' + o_path)
        r.append(o)
    return r
default_env.AddMethod(SourceToObjects)

#
# Now we describe our platforms and configure its environments.
# `dev_tests` Platform: Running tests on development computer
dev_tests_plat = {
    'cpputest_extensions_enabled' : True,
    'env' : default_env.Clone (
            # We want lot's of warning on dev_tests
            CXXFLAGS = ['-std=gnu++14', '-g3', '-O0',
                '-Wno-c++11-long-long', '-Wno-long-long', '-Wall', '-Wextra', '-Wshadow', '-Wswitch-default', '-Wswitch-enum',
                '-Wconversion', '-Wsign-conversion', '-Woverloaded-virtual', '-Wno-disabled-macro-expansion',
                '-Wno-padded', '-Wno-reserved-id-macro', '-Wno-keyword-macro', '-Wno-global-constructors',
                '-Wno-exit-time-destructors', '-Wno-weak-vtables', '-Wno-old-style-cast'],
            CFLAGS  = ['-std=gnu11', '-g3', '-O0',
                '-Wall', '-Wextra', '-Wswitch-default', '-Wswitch-enum', '-Wconversion', '-Wno-long-long'],
            CPPINCLUDES = []
    )
}

# `lpc176x_tests` Platform: Running tests on target board
lpc17xx_toolchain_path = '/usr/local/lpcxpresso_8.2.2_650/lpcxpresso/tools/bin'
lpc17xx_toolchain_prefix = 'arm-none-eabi-'

lpc176x_tests_plat = {
    'cpputest_extensions_enabled' : True,
    'env' : default_env.Clone (
        CC     = lpc17xx_toolchain_prefix + 'gcc',
        CXX    = lpc17xx_toolchain_prefix + "g++",
        LD     = lpc17xx_toolchain_prefix + "g++",
        AR     = lpc17xx_toolchain_prefix + "ar",
        STRIP  = lpc17xx_toolchain_prefix + "strip",
        RANLIB = lpc17xx_toolchain_prefix + "ranlib",
        CPPDEFINES = [
                      '__CODE_RED',
                      '__NEWLIB__',
                      '__LPC17XX__',
                      'CORE_M3',
                      ('__USE_CMSIS', 'CMSISv2p00_LPC17xx'),
                      'CPP_USE_HEAP',
                      ],
        CFLAGS = ['-std=gnu11'],
        CXXFLAGS = ['-Wall', '-fno-rtti', '-fno-exceptions', '-std=gnu++14'],
        CCFLAGS = ['-O0', '-g3', '-Wall', '-fmessage-length=0',
                   '-fno-builtin', '-ffunction-sections', '-fdata-sections',
                   '-mcpu=cortex-m3', '-mthumb'],
        CPPINCLUDES = [],
        LINKFLAGS = [
                     '-nostdlib',
                     '-Xlinker',
                     '--gc-sections',
                     '-Xlinker',
                     '-print-memory-usage',
                     '-mcpu=cortex-m3',
                     '-mthumb'
                     ]
    )
}
lpc176x_tests_plat['env'].PrependENVPath('PATH', lpc17xx_toolchain_path)

# Enable all platforms
platforms = {'lpc176x_tests' : lpc176x_tests_plat,
             'dev_tests' : dev_tests_plat}

# Build CppUTest libraries for dev_tests and lpc176x_tests platforms
cpputest = SConscript('dependencies/cpputest/Sconscript', exports ='platforms')

# Enable only lpc176x_tests platform
platforms = {'lpc176x_tests': lpc176x_tests_plat }

# Build CMSIS only for lpc176x_tests platform
SConscript('dependencies/lpc1769_board/Sconscript', exports ='platforms')

# Enable all platforms
platforms = {'lpc176x_tests' : lpc176x_tests_plat,
             'dev_tests' : dev_tests_plat}

# Enable GNU Coverage for the next builds on dev_tests platform
dev_tests_plat['env'].Append(
    CFLAGS = ['-fprofile-arcs', '-ftest-coverage'],
    CXXFLAGS = ['-fprofile-arcs', '-ftest-coverage'],
    LIBS = ['gcov']
)

# Build qf_demo as library for dev_tests and lpc176x_tests platforms
SConscript('qf_demo/Sconscript', exports ='platforms')


# Build qf_demo_tests executable for both platforms
SConscript('qf_demo_tests/Sconscript', exports ='platforms')

#
#
# Tests Build
# Use `scons tests` during deveopment, to print tests results and force
# build of everything.
tests = Command( target = "tests",
                source = platforms['dev_tests']['qf_demo_tests_executable'],
                action = "./$SOURCE -v | tee tests_report" )

Default(tests)

# Link lpc176x_tests platform with tests target to force buiod.
Depends(tests, platforms['lpc176x_tests']['qf_demo_tests_executable'])

#
#
# Coverage Commands
#
# Re run test and store to file silently
tests_report_only = Command( target = "tests_report",
                source = platforms['dev_tests']['qf_demo_tests_executable'],
                action = "./$SOURCE -v > ${TARGET}" )

# Generate .coverage.info for dev_tests executables
Depends(
       Command( target = ".coverage.info.pre",
                source = [
                          platforms['dev_tests']['qf_demo_build_dir'],
                          platforms['dev_tests']['qf_demo_tests_build_dir']
                         ],
                action = "lcov -q --capture --directory ${SOURCES[0]} " \
                         "--directory ${SOURCES[1]} " \
                         "--output-file $TARGET "
                         ),
       tests_report_only)

lcov = Command( target = ".coverage.info",
                source = ".coverage.info.pre",
                action = "echo \"" \
                         "qf_demo_tests/platform_dev_tests/platform/UtestPlatform.cpp " \
                         "/usr/include/* " \
                         "dependencies/* " \
                         "\" | xargs lcov -q --output-file $TARGET --remove $SOURCE"
                         )


# Print and safe coverage_report
coverage_report = Command( target = "coverage_report",
                           source = lcov,
                           action = "lcov --summary $SOURCE 2>&1 | tee $TARGET" )

# Generate html files for coverage
coverage_html = Command( target = "coverage",
                           source = lcov,
                           action = "genhtml -q $SOURCE --output-directory $TARGET" )

Clean('./', [coverage_html, coverage_report, lcov])
Clean ('./', "tests_report")
