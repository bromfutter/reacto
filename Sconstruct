#!python

# Overview of the build system
# - All global configurations goes in this file,
# - Each platforms created contains configurations and environment
# - Each project is called passing platforms.
# - For each platform one build will run, always in the 'build' folder.
# - Projects are expected to append data to platform enviroments when
#   necessary, such as includes, defines, libraries, etc.


#
# First we add our custom Functions to a default enviroment and configure it
import os
import fnmatch
default_env = Environment()

# Enable color terminal if available
if 'TERM' in os.environ.keys():
    default_env['ENV']['TERM'] = os.environ['TERM']

# Add a FindFiles function to help Programs to search for code
def FindFiles(self, path, glob):
    matches = []
    matches.extend(Glob(path + '/' + glob))
    matches.extend(Glob(path + '/*/' + glob))
    matches.extend(Glob(path + '/*/*/' + glob))
    matches.extend(Glob(path + '/*/*/*/' + glob))
    matches.extend(Glob(path + '/*/*/*/*/' + glob))
    matches.extend(Glob(path + '/*/*/*/*/*/' + glob))
    return matches
default_env.AddMethod(FindFiles)

# Transform a multiline string into a list of Files
def MultiLineStringToFiles(self, multiline_string):
    r = []
    for f in multiline_string.split('\n'):
        if len(f) > 0:
            r.append(File('./' + f))
    return r
default_env.AddMethod(MultiLineStringToFiles)

# Transform a list of C source into Objects
def SourceToObjects(self, source_list):
    r = []
    for s in source_list:
        s_path = s.path
        o_path = s_path.replace('.CPP', '.o').replace('.C', '.o').replace('.cpp', '.o').replace('.c', '.o')
        o = File('#' + o_path)
        r.append(o)
    return r
default_env.AddMethod(SourceToObjects)

# Transform a list of Objects into GCDA and GDNO
def ObjectsToGcov(self, source_list):
    r = []
    for s in source_list:
        s_path = s.path
        da_path = s_path.replace('.o', '.gcda')
        da = File('#' + da_path)
        no_path = s_path.replace('.o', '.gcno')
        no = File('#' + no_path)
        r.append(da)
        r.append(no)
    return r
default_env.AddMethod(ObjectsToGcov)

def EnablePlatformsFor(build_name, available_platforms):
    r = []
    for plat in available_platforms:
        if build_name in plat.BuildList():
            r.append(plat);
    return r

def FindAvailablePlatforms():
    r = []
    for f in Glob('build_platforms/*.sconscript'):
        plat = SConscript(f, exports = 'default_env')
        r.append(plat)
    return r;

available_platforms = FindAvailablePlatforms()

# Build CppUTest libraries for each platforms
platforms = EnablePlatformsFor('cpputest', available_platforms)
cpputest = SConscript('dependencies/cpputest/Sconscript', exports ='platforms')

# Enable GNU Coverage for the next builds
for plat in available_platforms:
    if plat.ProfileEnabled():
        plat.Env().Append(
            CFLAGS = ['-fprofile-arcs', '-ftest-coverage'],
            CXXFLAGS = ['-fprofile-arcs', '-ftest-coverage'],
            LIBS = ['gcov']
        )

# Build reacto as library
platforms = EnablePlatformsFor('reacto', available_platforms)
SConscript('reacto/Sconscript', exports ='platforms')

# Build reacto_tests executable
platforms = EnablePlatformsFor('reacto_tests', available_platforms)
SConscript('reacto_tests/Sconscript', exports ='platforms')

# Build examples
platforms = EnablePlatformsFor('msp430_blink', available_platforms)
SConscript('examples/msp430_blink/Sconscript', exports ='platforms')

# Build examples
platforms = EnablePlatformsFor('msp430_timed_blink', available_platforms)
SConscript('examples/msp430_timed_blink/Sconscript', exports ='platforms')

# Create extra targets for each platform
for p in available_platforms:
    p.PostBuildTargets()

print "Available targets:"
for plat in available_platforms:
    print '\t' + plat.Name() + ':'
    for target in plat.TargetNameList():
        print '\t\t'+ target
